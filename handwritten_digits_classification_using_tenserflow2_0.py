# -*- coding: utf-8 -*-
"""Handwritten Digits Classification using tenserflow2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVWwFtMl7AXO67HEp-boqcFaecfCegyH
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf 
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

#loadind test and train dataset of handwritten digits from keras 
(x_train,y_train),(x_test,y_test)= keras.datasets.mnist.load_data()

print(len(x_train))
print(len(x_test))

#each image is a 28x28 matrix of pixels ranging between 0 to 255
x_train[0].shape

#representing image in 2 D array , here 0 is black and 255 is white colour in the image
x_train[0]

#visualizing 2D array into image using matplotlib 
plt.matshow(x_train[0])

#scaling the values 
x_train=x_train/255
x_test=x_test/255

#flattening the 2d array(matrix) into single dimension
x_train_flattened=(x_train.reshape(len(x_train),28*28))
x_test_flattened=(x_test.reshape(len(x_test),28*28))
x_train_flattened.shape

#creating a basic neural network (single layer)
model = keras.Sequential([
        keras.layers.Dense(10,input_shape=(784,),activation='sigmoid')
])
#compiling the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

#fitting model to training data
model.fit(x_train_flattened,y_train,epochs=10)

#evaluating the accurecy of the model on test data
model.evaluate(x_test_flattened,y_test)

#predicting the values of test data
y_pred = model.predict(x_test_flattened)
y_pred[0]

#using argmax to find the predicted value
np.argmax(y_pred[0])
y_pred_lebels=[np.argmax(i) for i in y_pred]
y_pred_lebels[:5]

#buiulding confusion matrix
cm =tf.math.confusion_matrix(labels=y_test,predictions=y_pred_lebels)
cm

#using seaborn to visualize the confusion matrix
import seaborn as sn
plt.figure(figsize=(10,7))
sn.heatmap(cm, annot=True,fmt='d')
plt.xlabel('predicted')
plt.ylabel('Truth')

#adding a hidden layer to the single layer neural network
model = keras.Sequential([
        keras.layers.Dense(100,input_shape=(784,),activation='tanh'),
        keras.layers.Dense(10,activation='sigmoid')
])
#compiling the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

#fitting model to training data
model.fit(x_train_flattened,y_train,epochs=10)

#creating a neural network without the flatten array 
#using keras.Flatten as a layer to flatten the data 
model = keras.Sequential([
        tf.keras.layers.Flatten(input_shape=(28,28)),                
        keras.layers.Dense(100,activation='tanh'),
        keras.layers.Dense(10,activation='sigmoid')
])
#compiling the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

#fitting model to training data
model.fit(x_train,y_train,epochs=10)

#evaluating the model 
model.evaluate(x_test,y_test)